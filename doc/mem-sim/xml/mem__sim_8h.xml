<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="mem__sim_8h" kind="file">
    <compoundname>mem_sim.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="mem__sim__types_8h" local="yes">mem_sim_types.h</includes>
    <includes refid="mem__sim__macros_8h" local="yes">mem_sim_macros.h</includes>
    <incdepgraph>
      <node id="1">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>mem_sim_types.h</label>
        <link refid="mem__sim__types_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/types.h</label>
      </node>
      <node id="0">
        <label>include/mem_sim.h</label>
        <link refid="mem_sim.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mem_sim_macros.h</label>
        <link refid="mem__sim__macros_8h_source"/>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__sim_8h_1abb5a0f39c927736087184f93003a46ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_init</definition>
        <argsstring>(struct memsim_t *msim, memsim_iface_t iface, memsim_alg_t alg, uint32_t task_groups, uint32_t task_procs, uint32_t tasks, uint32_t g_slots, uint32_t s_slots, uint32_t a_slots, uint32_t ga_slots, uint64_t opt)</argsstring>
        <name>memsim_init</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <param>
          <type>memsim_iface_t</type>
          <declname>iface</declname>
        </param>
        <param>
          <type>memsim_alg_t</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>task_groups</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>task_procs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tasks</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>g_slots</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>s_slots</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>a_slots</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ga_slots</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Initializes the internal MEM_SIM state with the necessary hardware configuration options. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. Must not be null. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>is the interface type: MEMSIM_BASIC or MEMSIM_HMC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the coalescing algorithm: MEMSIM_SIMPLE or MEMSIM_EXP </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_groups</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of task groups on the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_procs</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of task procs in a task group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of tasks per task proc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g_slots</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of interface slots at the group interface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_slots</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of interface slots at the socket interface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_slots</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of interface slots at the amo interface [socket] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ga_slots</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of interface slots at the global addressing interface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>is a OR&apos;d set of memsim options: MEMSIM_AMO, MEMSIM_GA </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1a5d531491f95a8c5bd2eecf87d8f4d332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_free</definition>
        <argsstring>(struct memsim_t *msim)</argsstring>
        <name>memsim_free</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <briefdescription>
<para>Frees all the internal memsim state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1aceef729a6d340d3eb0f71765ada14e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_clock</definition>
        <argsstring>(struct memsim_t *msim)</argsstring>
        <name>memsim_clock</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <briefdescription>
<para>Initiates a clock signal event for the memsim instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1a1bad5808104fbdf52c6751f61d3b68bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_rqst</definition>
        <argsstring>(struct memsim_t *msim, uint64_t gconst, memsim_rqst_t rqst, uint64_t addr, uint64_t payload0, uint64_t payload1)</argsstring>
        <name>memsim_rqst</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>gconst</declname>
        </param>
        <param>
          <type>memsim_rqst_t</type>
          <declname>rqst</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>payload0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>payload1</declname>
        </param>
        <briefdescription>
<para>Initiates a memory request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gconst</parametername>
</parameternamelist>
<parameterdescription>
<para>is a GC64 constant register value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rqst</parametername>
</parameternamelist>
<parameterdescription>
<para>is the request type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the target address for the request </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload0</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional payload for the request [writes] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload1</parametername>
</parameternamelist>
<parameterdescription>
<para>is an optional payload for the request [CAS] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1ae7dcedd9853c7260f705f6be4a02c48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_reset</definition>
        <argsstring>(struct memsim_t *msim)</argsstring>
        <name>memsim_reset</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <briefdescription>
<para>resets the target memsim instance </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1aab498cdf5dde04a2bbbbdebf1ebdb09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_trace_handle</definition>
        <argsstring>(struct memsim_t *msim, FILE *tfile)</argsstring>
        <name>memsim_trace_handle</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>tfile</declname>
        </param>
        <briefdescription>
<para>Sets the open file handle for internal memsim tracing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*tfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is an open file handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="mem__sim_8h_1a2cb5e3fff0dd289874f27e3bfe6651a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memsim_trace_level</definition>
        <argsstring>(struct memsim_t *msim, uint32_t level)</argsstring>
        <name>memsim_trace_level</name>
        <param>
          <type>struct <ref refid="structmemsim__t" kindref="compound">memsim_t</ref> *</type>
          <declname>msim</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the trace level for the msim instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*msim</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a valid memsim structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>is the designated trace level </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, nonzero otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>GoblinCore-64 Memory Interface Simulation Library Header FIle. </para>    </briefdescription>
    <detaileddescription>
<para>The MEM_SIM library is a standard C library that provides functional simulation support for experimenting with various memory interface modules in association with the GoblinCore-64 architecture. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>_MEM_SIM_H_</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>GC64<sp/>MEMORY<sp/>INTERFACE<sp/>SIMULATION<sp/>MODULE</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>MAIN<sp/>HEADER<sp/>FILE<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor">#ifndef<sp/>_MEM_SIM_H_</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_MEM_SIM_H_</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mem_sim_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mem_sim_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------<sp/>FUNCTION<sp/>PROTOTYPES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1abb5a0f39c927736087184f93003a46ca" kindref="member">memsim_init</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim,<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memsim_iface_t<sp/>iface,<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memsim_alg_t<sp/>alg,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>task_groups,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>task_procs,<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>tasks,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>g_slots,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>s_slots,<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>a_slots,<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ga_slots,<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>opt<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1a5d531491f95a8c5bd2eecf87d8f4d332" kindref="member">memsim_free</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1aceef729a6d340d3eb0f71765ada14e7c" kindref="member">memsim_clock</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1a1bad5808104fbdf52c6751f61d3b68bd" kindref="member">memsim_rqst</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim,<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmemsim__entry__t_1a5e6fc38a3aa83e0c1ec7fcf9e1cf2563" kindref="member">gconst</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memsim_rqst_t<sp/><ref refid="structmemsim__entry__t_1a0bd6994a034a78c0d2b8d2adfc0cf2bd" kindref="member">rqst</ref>,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>addr,<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>payload0,<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>payload1<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1ae7dcedd9853c7260f705f6be4a02c48c" kindref="member">memsim_reset</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1aab498cdf5dde04a2bbbbdebf1ebdb09f" kindref="member">memsim_trace_handle</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*tfile<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mem__sim_8h_1a2cb5e3fff0dd289874f27e3bfe6651a1" kindref="member">memsim_trace_level</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmemsim__t" kindref="compound">memsim_t</ref><sp/>*msim,<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>level<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_MEM_SIM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EOF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jleidel/dev/working/goblin/goblin-core/sim/mem_sim/include/mem_sim.h"/>
  </compounddef>
</doxygen>
