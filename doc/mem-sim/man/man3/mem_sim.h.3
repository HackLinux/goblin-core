.TH "include/mem_sim.h" 3 "Sat Feb 8 2014" "Version 1.0" "MEM_SIM" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/mem_sim.h \- 
GoblinCore-64 Memory Interface Simulation Library Header FIle\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmemsim_init\fP (struct \fBmemsim_t\fP *msim, memsim_iface_t iface, memsim_alg_t alg, uint32_t task_groups, uint32_t task_procs, uint32_t tasks, uint32_t g_slots, uint32_t s_slots, uint32_t a_slots, uint32_t ga_slots, uint64_t opt)"
.br
.RI "\fIInitializes the internal MEM_SIM state with the necessary hardware configuration options\&. \fP"
.ti -1c
.RI "int \fBmemsim_free\fP (struct \fBmemsim_t\fP *msim)"
.br
.RI "\fIFrees all the internal memsim state\&. \fP"
.ti -1c
.RI "int \fBmemsim_clock\fP (struct \fBmemsim_t\fP *msim)"
.br
.RI "\fIInitiates a clock signal event for the memsim instance\&. \fP"
.ti -1c
.RI "int \fBmemsim_rqst\fP (struct \fBmemsim_t\fP *msim, uint64_t gconst, memsim_rqst_t rqst, uint64_t addr, uint64_t payload0, uint64_t payload1)"
.br
.RI "\fIInitiates a memory request\&. \fP"
.ti -1c
.RI "int \fBmemsim_reset\fP (struct \fBmemsim_t\fP *msim)"
.br
.RI "\fIresets the target memsim instance \fP"
.ti -1c
.RI "int \fBmemsim_trace_handle\fP (struct \fBmemsim_t\fP *msim, FILE *tfile)"
.br
.RI "\fISets the open file handle for internal memsim tracing\&. \fP"
.ti -1c
.RI "int \fBmemsim_trace_level\fP (struct \fBmemsim_t\fP *msim, uint32_t level)"
.br
.RI "\fISets the trace level for the msim instance\&. \fP"
.ti -1c
.RI "int \fBmemsim_set_hw\fP (struct \fBmemsim_t\fP *msim, uint32_t num_links, uint32_t num_lanes, float gbps)"
.br
.RI "\fIInitializes the base hardware configuration\&. \fP"
.ti -1c
.RI "int \fBmemsim_is_empty\fP (struct \fBmemsim_t\fP *msim)"
.br
.RI "\fIQueries the msim instance and determines whether all queues are empty\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
GoblinCore-64 Memory Interface Simulation Library Header FIle\&. 

The MEM_SIM library is a standard C library that provides functional simulation support for experimenting with various memory interface modules in association with the GoblinCore-64 architecture\&. 
.SH "Function Documentation"
.PP 
.SS "int memsim_clock (struct \fBmemsim_t\fP *msim)"

.PP
Initiates a clock signal event for the memsim instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_free (struct \fBmemsim_t\fP *msim)"

.PP
Frees all the internal memsim state\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_init (struct \fBmemsim_t\fP *msim, memsim_iface_tiface, memsim_alg_talg, uint32_ttask_groups, uint32_ttask_procs, uint32_ttasks, uint32_tg_slots, uint32_ts_slots, uint32_ta_slots, uint32_tga_slots, uint64_topt)"

.PP
Initializes the internal MEM_SIM state with the necessary hardware configuration options\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. Must not be null\&. 
.br
\fIiface\fP is the interface type: MEMSIM_BASIC or MEMSIM_HMC 
.br
\fIalg\fP is the coalescing algorithm: MEMSIM_SIMPLE or MEMSIM_EXP 
.br
\fItask_groups\fP is the number of task groups on the socket 
.br
\fItask_procs\fP is the number of task procs in a task group 
.br
\fItasks\fP is the number of tasks per task proc 
.br
\fIg_slots\fP is the number of interface slots at the group interface 
.br
\fIs_slots\fP is the number of interface slots at the socket interface 
.br
\fIa_slots\fP is the number of interface slots at the amo interface [socket] 
.br
\fIga_slots\fP is the number of interface slots at the global addressing interface 
.br
\fIopt\fP is a OR'd set of memsim options: MEMSIM_AMO, MEMSIM_GA 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_is_empty (struct \fBmemsim_t\fP *msim)"

.PP
Queries the msim instance and determines whether all queues are empty\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid mesim structure 
.RE
.PP
\fBReturns:\fP
.RS 4
MEMSIM_OK on success, MEMSIM_NEMPTY otherwise 
.RE
.PP

.SS "int memsim_reset (struct \fBmemsim_t\fP *msim)"

.PP
resets the target memsim instance 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_rqst (struct \fBmemsim_t\fP *msim, uint64_tgconst, memsim_rqst_trqst, uint64_taddr, uint64_tpayload0, uint64_tpayload1)"

.PP
Initiates a memory request\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.br
\fIgconst\fP is a GC64 constant register value 
.br
\fIrqst\fP is the request type 
.br
\fIaddr\fP is the target address for the request 
.br
\fIpayload0\fP is an optional payload for the request [writes] 
.br
\fIpayload1\fP is an optional payload for the request [CAS] 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_set_hw (struct \fBmemsim_t\fP *msim, uint32_tnum_links, uint32_tnum_lanes, floatgbps)"

.PP
Initializes the base hardware configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure 
.br
\fInum_links\fP is the number of HMC links on the socket 
.br
\fInum_lanes\fP is the number of SERDES lanes per link 
.br
\fIgbps\fP is the link data transfer rate in Gbps 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_trace_handle (struct \fBmemsim_t\fP *msim, FILE *tfile)"

.PP
Sets the open file handle for internal memsim tracing\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.br
\fI*tfile\fP is an open file handle 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SS "int memsim_trace_level (struct \fBmemsim_t\fP *msim, uint32_tlevel)"

.PP
Sets the trace level for the msim instance\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*msim\fP is a pointer to a valid memsim structure\&. 
.br
\fIlevel\fP is the designated trace level 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, nonzero otherwise 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MEM_SIM from the source code\&.
